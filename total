// ==UserScript==
// @name         Analizar y cargar tablas siguientes en CombatLog
// @namespace    https://tu.namespace.aqui
// @version      2.0
// @description  Carga todas las páginas, analiza duración entre ataques y detecta actividad de bots con modal mejorado y herramientas de reporte.
// @author       Tú
// @match        https://s*-*.gladiatus.gameforge.com/admin/index.php?action=module&modName=CombatLog*
// @include      https://s*-*.gladiatus.gameforge.com/admin/index.php?action=module&modName=CombatLog*
// @grant        none
// ==/UserScript==

(function () {
  'use strict';

  let resultadoMensaje = '';

  function copyStyles(sourceElement, targetElement) {
    const computed = window.getComputedStyle(sourceElement);
    for (let prop of computed) {
      try {
        targetElement.style[prop] = computed.getPropertyValue(prop);
      } catch {}
    }
    targetElement.style.cursor = 'pointer';
    targetElement.style.display = 'inline-block';
  }

  function mostrarModal(mensaje) {
  const fondo = document.createElement('div');
  fondo.style.position = 'fixed';
  fondo.style.top = 0;
  fondo.style.left = 0;
  fondo.style.width = '100vw';
  fondo.style.height = '100vh';
  fondo.style.backgroundColor = 'rgba(0, 0, 0, 0.5)';
  fondo.style.display = 'flex';
  fondo.style.justifyContent = 'center';
  fondo.style.alignItems = 'center';
  fondo.style.zIndex = 9999;

  const modal = document.createElement('div');
  modal.style.backgroundColor = '#d3d3d3';
  modal.style.padding = '30px 35px';
  modal.style.border = '2px solid #525252';
  modal.style.borderRadius = '10px';
  modal.style.boxShadow = '0 10px 30px rgba(0,0,0,0.5)';
  modal.style.minWidth = '600px';
  modal.style.fontFamily = 'Segoe UI, sans-serif';
  modal.style.position = 'relative';
  modal.style.color = '#333';

  // Botón cerrar X
  const cerrarX = document.createElement('div');
  cerrarX.textContent = '×';
  cerrarX.style.position = 'absolute';
  cerrarX.style.top = '10px';
  cerrarX.style.right = '10px';
  cerrarX.style.width = '28px';
  cerrarX.style.height = '28px';
  cerrarX.style.borderRadius = '50%';
  cerrarX.style.backgroundColor = '#999';
  cerrarX.style.color = 'white';
  cerrarX.style.display = 'flex';
  cerrarX.style.justifyContent = 'center';
  cerrarX.style.alignItems = 'center';
  cerrarX.style.fontSize = '20px';
  cerrarX.style.fontWeight = 'bold';
  cerrarX.style.cursor = 'pointer';
  cerrarX.title = 'Cerrar';
  cerrarX.addEventListener('click', () => {
    document.body.removeChild(fondo);
  });

  // Título modal
  const titulo = document.createElement('h2');
  titulo.textContent = 'Gestión de bots';
  titulo.style.fontSize = '24px';
  titulo.style.color = '#616064';
  titulo.style.marginTop = 0;
  titulo.style.marginBottom = '10px';

  // Separador
  const separador = document.createElement('hr');
  separador.style.border = '0';
  separador.style.borderTop = '1px solid #999';
  separador.style.marginBottom = '20px';

  // Contenido mensaje principal (HTML)
  const contenido = document.createElement('div');
  contenido.innerHTML = mensaje;
  contenido.style.fontSize = '16px';
  contenido.style.lineHeight = '1.5';
  contenido.style.marginBottom = '20px';

  modal.appendChild(cerrarX);
  modal.appendChild(titulo);
  modal.appendChild(separador);
  modal.appendChild(contenido);

  // --- Subtítulo Nota interna (Recurrencia)
  const notaInterna = document.createElement('h3');
  notaInterna.textContent = 'Nota interna (Recurrencia):';
  notaInterna.style.fontSize = '18px';
  notaInterna.style.color = '#444';
  notaInterna.style.marginTop = '10px';
  notaInterna.style.marginBottom = '6px';
  modal.appendChild(notaInterna);

  // Línea horizontal debajo de subtítulo nota interna
  const lineaNota = document.createElement('hr');
  lineaNota.style.border = '0';
  lineaNota.style.borderTop = '1px solid #999';
  lineaNota.style.marginBottom = '15px';
  modal.appendChild(lineaNota);

  // --- Línea con Ticket ID, 2 selects y botón generar
  const lineaControles = document.createElement('div');
  lineaControles.style.display = 'flex';
  lineaControles.style.alignItems = 'center';
  lineaControles.style.gap = '10px';

  // Ticket ID input (menos ancho)
  const ticketIDInput = document.createElement('input');
  ticketIDInput.type = 'text';
  ticketIDInput.placeholder = 'Ticket ID';
  ticketIDInput.style.flex = '0 0 150px'; // ancho fijo 150px
  ticketIDInput.style.padding = '5px 8px';
  ticketIDInput.style.border = '1px solid #888';
  ticketIDInput.style.borderRadius = '5px';

  // Select 1
  const select1 = document.createElement('select');
  ['Expedition', 'Circus Turma', 'Arena', 'Dungeon'].forEach(text => {
    const opt = document.createElement('option');
    opt.value = text;
    opt.textContent = text;
    select1.appendChild(opt);
  });
  select1.style.padding = '5px 8px';
  select1.style.borderRadius = '5px';
  select1.style.border = '1px solid #555';
  select1.style.backgroundColor = '#f5f5f5';

  // Select 2
  const select2 = document.createElement('select');
  ['1ra infracción', '2da infracción', '3ra infracción', '4ta infracción'].forEach(text => {
    const opt = document.createElement('option');
    opt.value = text;
    opt.textContent = text;
    select2.appendChild(opt);
  });
  select2.style.padding = '5px 8px';
  select2.style.borderRadius = '5px';
  select2.style.border = '1px solid #555';
  select2.style.backgroundColor = '#f5f5f5';

  // Botón generar
  const generarBtn = document.createElement('button');
  generarBtn.textContent = 'Generar';
  generarBtn.style.padding = '8px 12px';
  generarBtn.style.backgroundColor = '#444';
  generarBtn.style.color = 'white';
  generarBtn.style.border = 'none';
  generarBtn.style.borderRadius = '5px';
  generarBtn.style.cursor = 'pointer';

  // Agregar controles a la línea
  lineaControles.appendChild(ticketIDInput);
  lineaControles.appendChild(select1);
  lineaControles.appendChild(select2);
  lineaControles.appendChild(generarBtn);
  modal.appendChild(lineaControles);

  // --- Función para extraer datos del texto del modal ---
  function extraerDatos() {
    // Buscar texto con total de tiempo, ej:
    // "Se ha detectado un total de 120 horas, 53 minutos y 59 segundos sin pausas."
    const regexTiempo = /total de (\d+)\s*horas?,\s*(\d+)\s*minutos?\s*y\s*(\d+)\s*segundos?/i;
    // Buscar inicio y fin:
    const regexInicio = /Inicio:\s*(.+)/i;
    const regexFin = /Fin:\s*(.+)/i;

    const texto = contenido.textContent;

    const matchTiempo = texto.match(regexTiempo);
    const matchInicio = texto.match(regexInicio);
    const matchFin = texto.match(regexFin);

    if (!matchTiempo || !matchInicio || !matchFin) return null;

    const horas = matchTiempo[1];
    const minutos = matchTiempo[2];
    const segundos = matchTiempo[3];
    const inicio = matchInicio[1].trim();
    const fin = matchFin[1].trim();

    return { horas, minutos, segundos, inicio, fin };
  }

  // --- Función para obtener texto infracción según select ---
  function textoInfraccion(infraccion) {
    switch (infraccion) {
      case '1ra infracción':
        return 'Issued a 1st offense for scripting (7 days).';
      case '2da infracción':
        return 'Issued a 2nd offense for scripting (14 days).';
      case '3ra infracción':
        return 'Issued a 3rd offense for scripting (30 days).';
      case '4ta infracción':
        return 'Issued a 4th offense for scripting (PERMABAN). Approved by CM Daveius';
      default:
        return '';
    }
  }

  // --- Evento botón generar ---
  generarBtn.addEventListener('click', () => {
  const datos = extraerDatos();

  if (!datos) {
    alert('No se pudieron extraer los datos necesarios del mensaje.');
    return;
  }

  const { horas, minutos, segundos, inicio, fin } = datos;
  const ticketID = ticketIDInput.value.trim();
  const tipo = select1.value;
  const infraccion = select2.value;

  const duracion = `${horas}h ${minutos}m ${segundos}s`;

  // Línea Ticket ID en propia línea si existe
  const ticketLinea = ticketID ? `[Ticket-ID: ${ticketID}]\n` : '';

  const resultado = `${ticketLinea}After checking the ${tipo} logs, I found the following activity:\n\n • ${inicio} » ${fin} (${duracion})\n\n${textoInfraccion(infraccion)}`;

  navigator.clipboard.writeText(resultado).then(() => {
    generarBtn.textContent = 'Generado';
    generarBtn.style.backgroundColor = 'green';

    // Opcional: después de 3 segundos volver a estado original
    setTimeout(() => {
      generarBtn.textContent = 'Generar';
      generarBtn.style.backgroundColor = '#444';
    }, 3000);
  });
});


  fondo.appendChild(modal);
  document.body.appendChild(fondo);
}






  function addAnalizarButton() {
    const form = document.querySelector('form[name="searchForm"]');
    if (!form) return false;

    const submitBtn = form.querySelector('input[type="submit"]#submit');
    if (!submitBtn) return false;

    if (document.getElementById('btnAnalizar')) return true;

    const analizarBtn = document.createElement('input');
    analizarBtn.type = 'button';
    analizarBtn.value = 'Analizar';
    analizarBtn.id = 'btnAnalizar';
    copyStyles(submitBtn, analizarBtn);
    analizarBtn.style.marginLeft = '8px';
    submitBtn.parentNode.insertBefore(analizarBtn, submitBtn.nextSibling);

    const resultadosBtn = document.createElement('input');
    resultadosBtn.type = 'button';
    resultadosBtn.value = 'Resultados';
    resultadosBtn.id = 'btnResultados';
    copyStyles(submitBtn, resultadosBtn);
    resultadosBtn.style.marginLeft = '8px';
    resultadosBtn.disabled = true;
    submitBtn.parentNode.insertBefore(resultadosBtn, analizarBtn.nextSibling);

    resultadosBtn.addEventListener('click', () => {
      if (resultadoMensaje) mostrarModal(resultadoMensaje);
    });

    analizarBtn.addEventListener('click', async () => {
      analizarBtn.disabled = true;
      analizarBtn.value = 'Cargando...';

      const tabla = document.querySelector('table');
      if (!tabla) return;

      function encontrarSiguiente(doc = document) {
        return Array.from(doc.querySelectorAll('a')).find(a => a.textContent.trim() === 'Siguiente »');
      }

      async function cargarSiguiente(url) {
        const response = await fetch(url, { credentials: 'same-origin' });
        const text = await response.text();
        const doc = new DOMParser().parseFromString(text, 'text/html');
        const nuevaTabla = doc.querySelector('table');
        if (!nuevaTabla) return;
        const filasNuevas = Array.from(nuevaTabla.querySelectorAll('tbody tr')).slice(1);
        const tbodyActual = tabla.querySelector('tbody') || tabla;
        filasNuevas.forEach(fila => tbodyActual.appendChild(fila));
        const siguienteEnlace = encontrarSiguiente(doc);
        if (siguienteEnlace) await cargarSiguiente(siguienteEnlace.href);
      }

      const siguiente = encontrarSiguiente();
      if (siguiente) await cargarSiguiente(siguiente.href);

      const tbody = tabla.querySelector('tbody') || tabla;
      const filas = Array.from(tbody.querySelectorAll('tr'));
      if (filas.length === 0) return;

      const thead = tabla.querySelector('thead');
      if (thead && !thead.querySelector('th:first-child').textContent.includes("Duración")) {
        const th = document.createElement('th');
        th.textContent = 'Duración';
        thead.querySelector('tr').insertBefore(th, thead.querySelector('tr').firstChild);
      }

      function parseFechaHora(texto) {
        const partes = texto.split(' - ');
        if (partes.length !== 2) return null;
        const fechaStr = partes[0].replace(/^[^,]*, /, '');
        const horaStr = partes[1];
        const [dd, mm, yyyy] = fechaStr.split('.');
        return new Date(`${yyyy}-${mm}-${dd}T${horaStr}`);
      }

      for (let i = 0; i < filas.length; i++) {
        const tdDur = document.createElement('td');
        filas[i].insertBefore(tdDur, filas[i].firstChild);
      }

      let acumulado = 0, mejorAcumulado = 0;
      let secuenciaInicio = null, secuenciaFin = null;
      let mejorInicio = null, mejorFin = null;
      let filaInicio = null, filaFin = null;
      let mejorFilaInicio = null, mejorFilaFin = null;

      for (let i = filas.length - 1; i > 0; i--) {
        const filaActual = filas[i];
        const filaAnterior = filas[i - 1];
        const celdaHoraActual = filaActual.querySelector('td:nth-child(2)');
        const celdaHoraAnterior = filaAnterior.querySelector('td:nth-child(2)');
        if (!celdaHoraActual || !celdaHoraAnterior) continue;

        const fecha1 = parseFechaHora(celdaHoraActual.textContent.trim());
        const fecha2 = parseFechaHora(celdaHoraAnterior.textContent.trim());
        if (!fecha1 || !fecha2) continue;

        let diff = (fecha2 - fecha1) / 1000;
        if (diff < 0) diff = 0;

        const tdDur = filaAnterior.querySelector('td:first-child');
        const h = String(Math.floor(diff / 3600)).padStart(2, '0');
        const m = String(Math.floor((diff % 3600) / 60)).padStart(2, '0');
        const s = String(Math.floor(diff % 60)).padStart(2, '0');
        tdDur.textContent = `${h}:${m}:${s}`;

        if (diff > 2400) {
          tdDur.style.backgroundColor = 'red';
          tdDur.style.color = 'yellow';
          tdDur.style.fontWeight = 'bold';
        }

        if (diff >= 3600) {
          if (acumulado > mejorAcumulado) {
            mejorAcumulado = acumulado;
            mejorInicio = secuenciaInicio;
            mejorFin = secuenciaFin;
            mejorFilaInicio = filaInicio;
            mejorFilaFin = filaFin;
          }
          acumulado = 0;
          secuenciaInicio = null;
          filaInicio = null;
          continue;
        }

        if (acumulado === 0) {
          secuenciaInicio = fecha1;
          filaInicio = celdaHoraActual.textContent.trim();
        }

        acumulado += diff;
        secuenciaFin = fecha2;
        filaFin = celdaHoraAnterior.textContent.trim();
      }

      if (acumulado > mejorAcumulado) {
        mejorAcumulado = acumulado;
        mejorInicio = secuenciaInicio;
        mejorFin = secuenciaFin;
        mejorFilaInicio = filaInicio;
        mejorFilaFin = filaFin;
      }

      if (mejorAcumulado >= 129600) {
  const h = Math.floor(mejorAcumulado / 3600);
  const m = Math.floor((mejorAcumulado % 3600) / 60);
  const s = mejorAcumulado % 60;

  resultadoMensaje = `
  <strong style="color:red; font-size: 18px;">⛔ ¡El usuario está utilizando software externo!</strong><br><br>
  Se ha detectado un total de <strong>${h} horas, ${m} minutos y ${s} segundos</strong> sin pausas.<br><br>
  <strong>Inicio:</strong> ${mejorFilaInicio}<br>
  <strong>Fin:</strong> ${mejorFilaFin}
`;

} else {
  resultadoMensaje = `
  <strong style="color:green; font-size: 18px;">✅ ¡No hay actividad sospechosa!</strong><br><br>`;
}


      mostrarModal(resultadoMensaje);
      resultadosBtn.disabled = false;
      analizarBtn.disabled = false;
      analizarBtn.value = 'Analizar';
    });

    return true;
  }

  if (!addAnalizarButton()) {
    const observer = new MutationObserver(() => {
      if (addAnalizarButton()) observer.disconnect();
    });
    observer.observe(document.body, { childList: true, subtree: true });
  }
})();

